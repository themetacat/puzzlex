// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct RankRecordData {
  address[] players;
  uint256[] steps;
}

library RankRecord {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "", name: "RankRecord", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x7462000000000000000000000000000052616e6b5265636f7264000000000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0000000200000000000000000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (address, uint256, uint256)
  Schema constant _keySchema = Schema.wrap(0x00540300611f1f00000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (address[], uint256[])
  Schema constant _valueSchema = Schema.wrap(0x00000002c3810000000000000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](3);
    keyNames[0] = "tokenAddr";
    keyNames[1] = "tokenId";
    keyNames[2] = "round";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](2);
    fieldNames[0] = "players";
    fieldNames[1] = "steps";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get players.
   */
  function getPlayers(
    address tokenAddr,
    uint256 tokenId,
    uint256 round
  ) internal view returns (address[] memory players) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(tokenAddr)));
    _keyTuple[1] = bytes32(uint256(tokenId));
    _keyTuple[2] = bytes32(uint256(round));

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 0);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_address());
  }

  /**
   * @notice Get players.
   */
  function _getPlayers(
    address tokenAddr,
    uint256 tokenId,
    uint256 round
  ) internal view returns (address[] memory players) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(tokenAddr)));
    _keyTuple[1] = bytes32(uint256(tokenId));
    _keyTuple[2] = bytes32(uint256(round));

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 0);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_address());
  }

  /**
   * @notice Set players.
   */
  function setPlayers(address tokenAddr, uint256 tokenId, uint256 round, address[] memory players) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(tokenAddr)));
    _keyTuple[1] = bytes32(uint256(tokenId));
    _keyTuple[2] = bytes32(uint256(round));

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 0, EncodeArray.encode((players)));
  }

  /**
   * @notice Set players.
   */
  function _setPlayers(address tokenAddr, uint256 tokenId, uint256 round, address[] memory players) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(tokenAddr)));
    _keyTuple[1] = bytes32(uint256(tokenId));
    _keyTuple[2] = bytes32(uint256(round));

    StoreCore.setDynamicField(_tableId, _keyTuple, 0, EncodeArray.encode((players)));
  }

  /**
   * @notice Get the length of players.
   */
  function lengthPlayers(address tokenAddr, uint256 tokenId, uint256 round) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(tokenAddr)));
    _keyTuple[1] = bytes32(uint256(tokenId));
    _keyTuple[2] = bytes32(uint256(round));

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 20;
    }
  }

  /**
   * @notice Get the length of players.
   */
  function _lengthPlayers(address tokenAddr, uint256 tokenId, uint256 round) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(tokenAddr)));
    _keyTuple[1] = bytes32(uint256(tokenId));
    _keyTuple[2] = bytes32(uint256(round));

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 20;
    }
  }

  /**
   * @notice Get an item of players.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemPlayers(
    address tokenAddr,
    uint256 tokenId,
    uint256 round,
    uint256 _index
  ) internal view returns (address) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(tokenAddr)));
    _keyTuple[1] = bytes32(uint256(tokenId));
    _keyTuple[2] = bytes32(uint256(round));

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 20, (_index + 1) * 20);
      return (address(bytes20(_blob)));
    }
  }

  /**
   * @notice Get an item of players.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemPlayers(
    address tokenAddr,
    uint256 tokenId,
    uint256 round,
    uint256 _index
  ) internal view returns (address) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(tokenAddr)));
    _keyTuple[1] = bytes32(uint256(tokenId));
    _keyTuple[2] = bytes32(uint256(round));

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 20, (_index + 1) * 20);
      return (address(bytes20(_blob)));
    }
  }

  /**
   * @notice Push an element to players.
   */
  function pushPlayers(address tokenAddr, uint256 tokenId, uint256 round, address _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(tokenAddr)));
    _keyTuple[1] = bytes32(uint256(tokenId));
    _keyTuple[2] = bytes32(uint256(round));

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 0, abi.encodePacked((_element)));
  }

  /**
   * @notice Push an element to players.
   */
  function _pushPlayers(address tokenAddr, uint256 tokenId, uint256 round, address _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(tokenAddr)));
    _keyTuple[1] = bytes32(uint256(tokenId));
    _keyTuple[2] = bytes32(uint256(round));

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 0, abi.encodePacked((_element)));
  }

  /**
   * @notice Pop an element from players.
   */
  function popPlayers(address tokenAddr, uint256 tokenId, uint256 round) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(tokenAddr)));
    _keyTuple[1] = bytes32(uint256(tokenId));
    _keyTuple[2] = bytes32(uint256(round));

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 0, 20);
  }

  /**
   * @notice Pop an element from players.
   */
  function _popPlayers(address tokenAddr, uint256 tokenId, uint256 round) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(tokenAddr)));
    _keyTuple[1] = bytes32(uint256(tokenId));
    _keyTuple[2] = bytes32(uint256(round));

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 0, 20);
  }

  /**
   * @notice Update an element of players at `_index`.
   */
  function updatePlayers(address tokenAddr, uint256 tokenId, uint256 round, uint256 _index, address _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(tokenAddr)));
    _keyTuple[1] = bytes32(uint256(tokenId));
    _keyTuple[2] = bytes32(uint256(round));

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 20), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update an element of players at `_index`.
   */
  function _updatePlayers(
    address tokenAddr,
    uint256 tokenId,
    uint256 round,
    uint256 _index,
    address _element
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(tokenAddr)));
    _keyTuple[1] = bytes32(uint256(tokenId));
    _keyTuple[2] = bytes32(uint256(round));

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 20), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get steps.
   */
  function getSteps(address tokenAddr, uint256 tokenId, uint256 round) internal view returns (uint256[] memory steps) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(tokenAddr)));
    _keyTuple[1] = bytes32(uint256(tokenId));
    _keyTuple[2] = bytes32(uint256(round));

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 1);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint256());
  }

  /**
   * @notice Get steps.
   */
  function _getSteps(address tokenAddr, uint256 tokenId, uint256 round) internal view returns (uint256[] memory steps) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(tokenAddr)));
    _keyTuple[1] = bytes32(uint256(tokenId));
    _keyTuple[2] = bytes32(uint256(round));

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 1);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint256());
  }

  /**
   * @notice Set steps.
   */
  function setSteps(address tokenAddr, uint256 tokenId, uint256 round, uint256[] memory steps) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(tokenAddr)));
    _keyTuple[1] = bytes32(uint256(tokenId));
    _keyTuple[2] = bytes32(uint256(round));

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 1, EncodeArray.encode((steps)));
  }

  /**
   * @notice Set steps.
   */
  function _setSteps(address tokenAddr, uint256 tokenId, uint256 round, uint256[] memory steps) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(tokenAddr)));
    _keyTuple[1] = bytes32(uint256(tokenId));
    _keyTuple[2] = bytes32(uint256(round));

    StoreCore.setDynamicField(_tableId, _keyTuple, 1, EncodeArray.encode((steps)));
  }

  /**
   * @notice Get the length of steps.
   */
  function lengthSteps(address tokenAddr, uint256 tokenId, uint256 round) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(tokenAddr)));
    _keyTuple[1] = bytes32(uint256(tokenId));
    _keyTuple[2] = bytes32(uint256(round));

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 1);
    unchecked {
      return _byteLength / 32;
    }
  }

  /**
   * @notice Get the length of steps.
   */
  function _lengthSteps(address tokenAddr, uint256 tokenId, uint256 round) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(tokenAddr)));
    _keyTuple[1] = bytes32(uint256(tokenId));
    _keyTuple[2] = bytes32(uint256(round));

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 1);
    unchecked {
      return _byteLength / 32;
    }
  }

  /**
   * @notice Get an item of steps.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemSteps(
    address tokenAddr,
    uint256 tokenId,
    uint256 round,
    uint256 _index
  ) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(tokenAddr)));
    _keyTuple[1] = bytes32(uint256(tokenId));
    _keyTuple[2] = bytes32(uint256(round));

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 1, _index * 32, (_index + 1) * 32);
      return (uint256(bytes32(_blob)));
    }
  }

  /**
   * @notice Get an item of steps.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemSteps(
    address tokenAddr,
    uint256 tokenId,
    uint256 round,
    uint256 _index
  ) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(tokenAddr)));
    _keyTuple[1] = bytes32(uint256(tokenId));
    _keyTuple[2] = bytes32(uint256(round));

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 1, _index * 32, (_index + 1) * 32);
      return (uint256(bytes32(_blob)));
    }
  }

  /**
   * @notice Push an element to steps.
   */
  function pushSteps(address tokenAddr, uint256 tokenId, uint256 round, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(tokenAddr)));
    _keyTuple[1] = bytes32(uint256(tokenId));
    _keyTuple[2] = bytes32(uint256(round));

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 1, abi.encodePacked((_element)));
  }

  /**
   * @notice Push an element to steps.
   */
  function _pushSteps(address tokenAddr, uint256 tokenId, uint256 round, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(tokenAddr)));
    _keyTuple[1] = bytes32(uint256(tokenId));
    _keyTuple[2] = bytes32(uint256(round));

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 1, abi.encodePacked((_element)));
  }

  /**
   * @notice Pop an element from steps.
   */
  function popSteps(address tokenAddr, uint256 tokenId, uint256 round) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(tokenAddr)));
    _keyTuple[1] = bytes32(uint256(tokenId));
    _keyTuple[2] = bytes32(uint256(round));

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 1, 32);
  }

  /**
   * @notice Pop an element from steps.
   */
  function _popSteps(address tokenAddr, uint256 tokenId, uint256 round) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(tokenAddr)));
    _keyTuple[1] = bytes32(uint256(tokenId));
    _keyTuple[2] = bytes32(uint256(round));

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 1, 32);
  }

  /**
   * @notice Update an element of steps at `_index`.
   */
  function updateSteps(address tokenAddr, uint256 tokenId, uint256 round, uint256 _index, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(tokenAddr)));
    _keyTuple[1] = bytes32(uint256(tokenId));
    _keyTuple[2] = bytes32(uint256(round));

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 1, uint40(_index * 32), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update an element of steps at `_index`.
   */
  function _updateSteps(address tokenAddr, uint256 tokenId, uint256 round, uint256 _index, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(tokenAddr)));
    _keyTuple[1] = bytes32(uint256(tokenId));
    _keyTuple[2] = bytes32(uint256(round));

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 1, uint40(_index * 32), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get the full data.
   */
  function get(address tokenAddr, uint256 tokenId, uint256 round) internal view returns (RankRecordData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(tokenAddr)));
    _keyTuple[1] = bytes32(uint256(tokenId));
    _keyTuple[2] = bytes32(uint256(round));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(
    address tokenAddr,
    uint256 tokenId,
    uint256 round
  ) internal view returns (RankRecordData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(tokenAddr)));
    _keyTuple[1] = bytes32(uint256(tokenId));
    _keyTuple[2] = bytes32(uint256(round));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    address tokenAddr,
    uint256 tokenId,
    uint256 round,
    address[] memory players,
    uint256[] memory steps
  ) internal {
    bytes memory _staticData;
    EncodedLengths _encodedLengths = encodeLengths(players, steps);
    bytes memory _dynamicData = encodeDynamic(players, steps);

    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(tokenAddr)));
    _keyTuple[1] = bytes32(uint256(tokenId));
    _keyTuple[2] = bytes32(uint256(round));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    address tokenAddr,
    uint256 tokenId,
    uint256 round,
    address[] memory players,
    uint256[] memory steps
  ) internal {
    bytes memory _staticData;
    EncodedLengths _encodedLengths = encodeLengths(players, steps);
    bytes memory _dynamicData = encodeDynamic(players, steps);

    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(tokenAddr)));
    _keyTuple[1] = bytes32(uint256(tokenId));
    _keyTuple[2] = bytes32(uint256(round));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(address tokenAddr, uint256 tokenId, uint256 round, RankRecordData memory _table) internal {
    bytes memory _staticData;
    EncodedLengths _encodedLengths = encodeLengths(_table.players, _table.steps);
    bytes memory _dynamicData = encodeDynamic(_table.players, _table.steps);

    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(tokenAddr)));
    _keyTuple[1] = bytes32(uint256(tokenId));
    _keyTuple[2] = bytes32(uint256(round));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(address tokenAddr, uint256 tokenId, uint256 round, RankRecordData memory _table) internal {
    bytes memory _staticData;
    EncodedLengths _encodedLengths = encodeLengths(_table.players, _table.steps);
    bytes memory _dynamicData = encodeDynamic(_table.players, _table.steps);

    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(tokenAddr)));
    _keyTuple[1] = bytes32(uint256(tokenId));
    _keyTuple[2] = bytes32(uint256(round));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of dynamic data using the encoded lengths.
   */
  function decodeDynamic(
    EncodedLengths _encodedLengths,
    bytes memory _blob
  ) internal pure returns (address[] memory players, uint256[] memory steps) {
    uint256 _start;
    uint256 _end;
    unchecked {
      _end = _encodedLengths.atIndex(0);
    }
    players = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_address());

    _start = _end;
    unchecked {
      _end += _encodedLengths.atIndex(1);
    }
    steps = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_uint256());
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   *
   * @param _encodedLengths Encoded lengths of dynamic fields.
   * @param _dynamicData Tightly packed dynamic fields.
   */
  function decode(
    bytes memory,
    EncodedLengths _encodedLengths,
    bytes memory _dynamicData
  ) internal pure returns (RankRecordData memory _table) {
    (_table.players, _table.steps) = decodeDynamic(_encodedLengths, _dynamicData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(address tokenAddr, uint256 tokenId, uint256 round) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(tokenAddr)));
    _keyTuple[1] = bytes32(uint256(tokenId));
    _keyTuple[2] = bytes32(uint256(round));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(address tokenAddr, uint256 tokenId, uint256 round) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(tokenAddr)));
    _keyTuple[1] = bytes32(uint256(tokenId));
    _keyTuple[2] = bytes32(uint256(round));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack dynamic data lengths using this table's schema.
   * @return _encodedLengths The lengths of the dynamic fields (packed into a single bytes32 value).
   */
  function encodeLengths(
    address[] memory players,
    uint256[] memory steps
  ) internal pure returns (EncodedLengths _encodedLengths) {
    // Lengths are effectively checked during copy by 2**40 bytes exceeding gas limits
    unchecked {
      _encodedLengths = EncodedLengthsLib.pack(players.length * 20, steps.length * 32);
    }
  }

  /**
   * @notice Tightly pack dynamic (variable length) data using this table's schema.
   * @return The dynamic data, encoded into a sequence of bytes.
   */
  function encodeDynamic(address[] memory players, uint256[] memory steps) internal pure returns (bytes memory) {
    return abi.encodePacked(EncodeArray.encode((players)), EncodeArray.encode((steps)));
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    address[] memory players,
    uint256[] memory steps
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData;
    EncodedLengths _encodedLengths = encodeLengths(players, steps);
    bytes memory _dynamicData = encodeDynamic(players, steps);

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(address tokenAddr, uint256 tokenId, uint256 round) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(tokenAddr)));
    _keyTuple[1] = bytes32(uint256(tokenId));
    _keyTuple[2] = bytes32(uint256(round));

    return _keyTuple;
  }
}
