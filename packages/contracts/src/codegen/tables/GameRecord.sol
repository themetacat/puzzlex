// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct GameRecordData {
  uint256 playTimes;
  uint256 successTimes;
  uint256 successPlayer;
  uint256 pool;
}

library GameRecord {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "", name: "GameRecord", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x7462000000000000000000000000000047616d655265636f7264000000000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0080040020202020000000000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (address, uint256, uint256)
  Schema constant _keySchema = Schema.wrap(0x00540300611f1f00000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint256, uint256, uint256, uint256)
  Schema constant _valueSchema = Schema.wrap(0x008004001f1f1f1f000000000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](3);
    keyNames[0] = "tokenAddr";
    keyNames[1] = "tokenId";
    keyNames[2] = "round";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](4);
    fieldNames[0] = "playTimes";
    fieldNames[1] = "successTimes";
    fieldNames[2] = "successPlayer";
    fieldNames[3] = "pool";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get playTimes.
   */
  function getPlayTimes(address tokenAddr, uint256 tokenId, uint256 round) internal view returns (uint256 playTimes) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(tokenAddr)));
    _keyTuple[1] = bytes32(uint256(tokenId));
    _keyTuple[2] = bytes32(uint256(round));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get playTimes.
   */
  function _getPlayTimes(address tokenAddr, uint256 tokenId, uint256 round) internal view returns (uint256 playTimes) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(tokenAddr)));
    _keyTuple[1] = bytes32(uint256(tokenId));
    _keyTuple[2] = bytes32(uint256(round));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set playTimes.
   */
  function setPlayTimes(address tokenAddr, uint256 tokenId, uint256 round, uint256 playTimes) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(tokenAddr)));
    _keyTuple[1] = bytes32(uint256(tokenId));
    _keyTuple[2] = bytes32(uint256(round));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((playTimes)), _fieldLayout);
  }

  /**
   * @notice Set playTimes.
   */
  function _setPlayTimes(address tokenAddr, uint256 tokenId, uint256 round, uint256 playTimes) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(tokenAddr)));
    _keyTuple[1] = bytes32(uint256(tokenId));
    _keyTuple[2] = bytes32(uint256(round));

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((playTimes)), _fieldLayout);
  }

  /**
   * @notice Get successTimes.
   */
  function getSuccessTimes(
    address tokenAddr,
    uint256 tokenId,
    uint256 round
  ) internal view returns (uint256 successTimes) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(tokenAddr)));
    _keyTuple[1] = bytes32(uint256(tokenId));
    _keyTuple[2] = bytes32(uint256(round));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get successTimes.
   */
  function _getSuccessTimes(
    address tokenAddr,
    uint256 tokenId,
    uint256 round
  ) internal view returns (uint256 successTimes) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(tokenAddr)));
    _keyTuple[1] = bytes32(uint256(tokenId));
    _keyTuple[2] = bytes32(uint256(round));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set successTimes.
   */
  function setSuccessTimes(address tokenAddr, uint256 tokenId, uint256 round, uint256 successTimes) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(tokenAddr)));
    _keyTuple[1] = bytes32(uint256(tokenId));
    _keyTuple[2] = bytes32(uint256(round));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((successTimes)), _fieldLayout);
  }

  /**
   * @notice Set successTimes.
   */
  function _setSuccessTimes(address tokenAddr, uint256 tokenId, uint256 round, uint256 successTimes) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(tokenAddr)));
    _keyTuple[1] = bytes32(uint256(tokenId));
    _keyTuple[2] = bytes32(uint256(round));

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((successTimes)), _fieldLayout);
  }

  /**
   * @notice Get successPlayer.
   */
  function getSuccessPlayer(
    address tokenAddr,
    uint256 tokenId,
    uint256 round
  ) internal view returns (uint256 successPlayer) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(tokenAddr)));
    _keyTuple[1] = bytes32(uint256(tokenId));
    _keyTuple[2] = bytes32(uint256(round));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get successPlayer.
   */
  function _getSuccessPlayer(
    address tokenAddr,
    uint256 tokenId,
    uint256 round
  ) internal view returns (uint256 successPlayer) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(tokenAddr)));
    _keyTuple[1] = bytes32(uint256(tokenId));
    _keyTuple[2] = bytes32(uint256(round));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set successPlayer.
   */
  function setSuccessPlayer(address tokenAddr, uint256 tokenId, uint256 round, uint256 successPlayer) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(tokenAddr)));
    _keyTuple[1] = bytes32(uint256(tokenId));
    _keyTuple[2] = bytes32(uint256(round));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((successPlayer)), _fieldLayout);
  }

  /**
   * @notice Set successPlayer.
   */
  function _setSuccessPlayer(address tokenAddr, uint256 tokenId, uint256 round, uint256 successPlayer) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(tokenAddr)));
    _keyTuple[1] = bytes32(uint256(tokenId));
    _keyTuple[2] = bytes32(uint256(round));

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((successPlayer)), _fieldLayout);
  }

  /**
   * @notice Get pool.
   */
  function getPool(address tokenAddr, uint256 tokenId, uint256 round) internal view returns (uint256 pool) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(tokenAddr)));
    _keyTuple[1] = bytes32(uint256(tokenId));
    _keyTuple[2] = bytes32(uint256(round));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get pool.
   */
  function _getPool(address tokenAddr, uint256 tokenId, uint256 round) internal view returns (uint256 pool) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(tokenAddr)));
    _keyTuple[1] = bytes32(uint256(tokenId));
    _keyTuple[2] = bytes32(uint256(round));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set pool.
   */
  function setPool(address tokenAddr, uint256 tokenId, uint256 round, uint256 pool) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(tokenAddr)));
    _keyTuple[1] = bytes32(uint256(tokenId));
    _keyTuple[2] = bytes32(uint256(round));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((pool)), _fieldLayout);
  }

  /**
   * @notice Set pool.
   */
  function _setPool(address tokenAddr, uint256 tokenId, uint256 round, uint256 pool) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(tokenAddr)));
    _keyTuple[1] = bytes32(uint256(tokenId));
    _keyTuple[2] = bytes32(uint256(round));

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((pool)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get(address tokenAddr, uint256 tokenId, uint256 round) internal view returns (GameRecordData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(tokenAddr)));
    _keyTuple[1] = bytes32(uint256(tokenId));
    _keyTuple[2] = bytes32(uint256(round));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(
    address tokenAddr,
    uint256 tokenId,
    uint256 round
  ) internal view returns (GameRecordData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(tokenAddr)));
    _keyTuple[1] = bytes32(uint256(tokenId));
    _keyTuple[2] = bytes32(uint256(round));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    address tokenAddr,
    uint256 tokenId,
    uint256 round,
    uint256 playTimes,
    uint256 successTimes,
    uint256 successPlayer,
    uint256 pool
  ) internal {
    bytes memory _staticData = encodeStatic(playTimes, successTimes, successPlayer, pool);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(tokenAddr)));
    _keyTuple[1] = bytes32(uint256(tokenId));
    _keyTuple[2] = bytes32(uint256(round));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    address tokenAddr,
    uint256 tokenId,
    uint256 round,
    uint256 playTimes,
    uint256 successTimes,
    uint256 successPlayer,
    uint256 pool
  ) internal {
    bytes memory _staticData = encodeStatic(playTimes, successTimes, successPlayer, pool);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(tokenAddr)));
    _keyTuple[1] = bytes32(uint256(tokenId));
    _keyTuple[2] = bytes32(uint256(round));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(address tokenAddr, uint256 tokenId, uint256 round, GameRecordData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.playTimes, _table.successTimes, _table.successPlayer, _table.pool);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(tokenAddr)));
    _keyTuple[1] = bytes32(uint256(tokenId));
    _keyTuple[2] = bytes32(uint256(round));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(address tokenAddr, uint256 tokenId, uint256 round, GameRecordData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.playTimes, _table.successTimes, _table.successPlayer, _table.pool);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(tokenAddr)));
    _keyTuple[1] = bytes32(uint256(tokenId));
    _keyTuple[2] = bytes32(uint256(round));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  ) internal pure returns (uint256 playTimes, uint256 successTimes, uint256 successPlayer, uint256 pool) {
    playTimes = (uint256(Bytes.getBytes32(_blob, 0)));

    successTimes = (uint256(Bytes.getBytes32(_blob, 32)));

    successPlayer = (uint256(Bytes.getBytes32(_blob, 64)));

    pool = (uint256(Bytes.getBytes32(_blob, 96)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (GameRecordData memory _table) {
    (_table.playTimes, _table.successTimes, _table.successPlayer, _table.pool) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(address tokenAddr, uint256 tokenId, uint256 round) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(tokenAddr)));
    _keyTuple[1] = bytes32(uint256(tokenId));
    _keyTuple[2] = bytes32(uint256(round));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(address tokenAddr, uint256 tokenId, uint256 round) internal {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(tokenAddr)));
    _keyTuple[1] = bytes32(uint256(tokenId));
    _keyTuple[2] = bytes32(uint256(round));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    uint256 playTimes,
    uint256 successTimes,
    uint256 successPlayer,
    uint256 pool
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(playTimes, successTimes, successPlayer, pool);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint256 playTimes,
    uint256 successTimes,
    uint256 successPlayer,
    uint256 pool
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(playTimes, successTimes, successPlayer, pool);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(address tokenAddr, uint256 tokenId, uint256 round) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](3);
    _keyTuple[0] = bytes32(uint256(uint160(tokenAddr)));
    _keyTuple[1] = bytes32(uint256(tokenId));
    _keyTuple[2] = bytes32(uint256(round));

    return _keyTuple;
  }
}
